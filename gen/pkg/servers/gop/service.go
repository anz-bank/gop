// Code generated by sysl DO NOT EDIT.
package gop

import (
	"context"
	"fmt"
	"net/http"
	"net/url"

	"github.com/anz-bank/sysl-go/common"
	"github.com/anz-bank/sysl-go/restlib"
	"github.com/anz-bank/sysl-go/validator"
)

// Service interface for gop
type Service interface {
	Get(ctx context.Context, req *GetRequest) (*Object, error)
}

// Client for gop API
type Client struct {
	client *http.Client
	url    string
}

// NewClient for gop
func NewClient(client *http.Client, serviceURL string) *Client {
	return &Client{client, serviceURL}
}

// Get ...
func (s *Client) Get(ctx context.Context, req *GetRequest) (*Object, error) {
	required := []string{}
	var okResponse Object
	u, err := url.Parse(fmt.Sprintf("%s/", s.url))
	if err != nil {
		return nil, common.CreateError(ctx, common.InternalError, "failed to parse url", err)
	}

	q := u.Query()
	q.Add("resource", req.Resource)

	u.RawQuery = q.Encode()
	result, err := restlib.DoHTTPRequest(ctx, s.client, "GET", u.String(), nil, required, &okResponse, nil)
	restlib.OnRestResultHTTPResult(ctx, result, err)
	if err != nil {
		return nil, common.CreateError(ctx, common.DownstreamUnavailableError, "call failed: gop <- GET "+u.String(), err)
	}

	if result.HTTPResponse.StatusCode == http.StatusUnauthorized {
		return nil, common.CreateDownstreamError(ctx, common.DownstreamUnauthorizedError, result.HTTPResponse, result.Body, nil)
	}
	OkObjectResponse, ok := result.Response.(*Object)
	if ok {
		valErr := validator.Validate(OkObjectResponse)
		if valErr != nil {
			return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, valErr)
		}

		return OkObjectResponse, nil
	}

	return nil, common.CreateDownstreamError(ctx, common.DownstreamUnexpectedResponseError, result.HTTPResponse, result.Body, nil)
}
